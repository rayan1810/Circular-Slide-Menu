{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useColorMode = function useColorMode() {\n  var _React$useContext = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = (0, _react.useState)(initialColorMode),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      colorMode = _useState2[0],\n      setRawMode = _useState2[1];\n\n  function setColorMode(val) {\n    return _regenerator.default.async(function setColorMode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regenerator.default.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regenerator.default.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator.default.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  var _React$useContext2 = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\native-base\\lib\\commonjs\\core\\color-mode\\hooks.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","useColorModeValue","useModeManager","useAccessibleColors","useColorMode","_regenerator","_slicedToArray2","_react","_Context","_React$useContext","default","useContext","HybridContext","colorModeContext","colorMode","undefined","Error","light","dark","_useColorMode","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_reactNative","useColorScheme","_useState","useState","_useState2","setRawMode","setColorMode","val","async","setColorMode$","_context","prev","next","awrap","set","stop","Promise","useEffect","getMode","getMode$","_context2","get","sent","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"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","sourcesContent":["var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useColorModeValue=useColorModeValue;exports.useModeManager=useModeManager;exports.useAccessibleColors=useAccessibleColors;exports.useColorMode=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireWildcard(require(\"react\"));var _Context=require(\"./../hybrid-overlay/Context\");var _reactNative=require(\"react-native\");var useColorMode=function useColorMode(){var _React$useContext=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};exports.useColorMode=useColorMode;function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=(0,_reactNative.useColorScheme)();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState=(0,_react.useState)(initialColorMode),_useState2=(0,_slicedToArray2.default)(_useState,2),colorMode=_useState2[0],setRawMode=_useState2[1];function setColorMode(val){return _regenerator.default.async(function setColorMode$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regenerator.default.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}(0,_react.useEffect)(function(){if(colorModeManager){(function getMode(){var value;return _regenerator.default.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);(0,_react.useEffect)(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}function useAccessibleColors(){var _React$useContext2=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"script"}