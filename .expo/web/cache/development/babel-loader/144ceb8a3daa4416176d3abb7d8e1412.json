{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}\n;","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\modules\\useResponderEvents\\index.js"],"names":["React","ResponderSystem","emptyObject","idCounter","useStable","getInitialValue","ref","useRef","current","useResponderEvents","hostRef","config","id","isAttachedRef","useEffect","attachListeners","removeNode","_config","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"mappings":"AAkBA,OAAM,KAAMA,KAAZ,MAAuB,OAAvB;AACA,OAAM,KAAMC,eAAZ,MAAiC,mBAAjC;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,SAAS,GAAG,CAAhB;;SAESC,S,CAAUC,e,EAAiB;AAClC,MAAIC,GAAG,GAAGN,KAAK,CAACO,MAANP,CAAa,IAAbA,CAAV;;AAEA,MAAIM,GAAG,CAACE,OAAJF,IAAe,IAAnB,EAAyB;AACvBA,IAAAA,GAAG,CAACE,OAAJF,GAAcD,eAAe,EAA7BC;AACD;;AAED,SAAOA,GAAG,CAACE,OAAX;AACD;;AAED,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC1D,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrBA,IAAAA,MAAM,GAAGT,WAATS;AACD;;AAED,MAAIC,EAAE,GAAGR,SAAS,CAAC,YAAY;AAC7B,WAAOD,SAAS,EAAhB;AACD,GAFiB,CAAlB;AAGA,MAAIU,aAAa,GAAGb,KAAK,CAACO,MAANP,CAAa,KAAbA,CAApB;AAIAA,EAAAA,KAAK,CAACc,SAANd,CAAgB,YAAY;AAC1BC,IAAAA,eAAe,CAACc,eAAhBd;AACA,WAAO,YAAY;AACjBA,MAAAA,eAAe,CAACe,UAAhBf,CAA2BW,EAA3BX;AACD,KAFD;AAGD,GALDD,EAKG,CAACY,EAAD,CALHZ;AAOAA,EAAAA,KAAK,CAACc,SAANd,CAAgB,YAAY;AAC1B,QAAIiB,OAAO,GAAGN,MAAd;AAAA,QACIO,wBAAwB,GAAGD,OAAO,CAACC,wBADvC;AAAA,QAEIC,+BAA+B,GAAGF,OAAO,CAACE,+BAF9C;AAAA,QAGIC,0BAA0B,GAAGH,OAAO,CAACG,0BAHzC;AAAA,QAIIC,iCAAiC,GAAGJ,OAAO,CAACI,iCAJhD;AAAA,QAKIC,mCAAmC,GAAGL,OAAO,CAACK,mCALlD;AAAA,QAMIC,0CAA0C,GAAGN,OAAO,CAACM,0CANzD;AAAA,QAOIC,yBAAyB,GAAGP,OAAO,CAACO,yBAPxC;AAAA,QAQIC,gCAAgC,GAAGR,OAAO,CAACQ,gCAR/C;AASA,QAAIC,uBAAuB,GAAGR,wBAAwB,IAAI,IAA5BA,IAAoCC,+BAA+B,IAAI,IAAvED,IAA+EE,0BAA0B,IAAI,IAA7GF,IAAqHG,iCAAiC,IAAI,IAA1JH,IAAkKI,mCAAmC,IAAI,IAAzMJ,IAAiNK,0CAA0C,IAAI,IAA/PL,IAAuQM,yBAAyB,IAAI,IAApSN,IAA4SO,gCAAgC,IAAI,IAA9W;AACA,QAAIE,IAAI,GAAGjB,OAAO,CAACF,OAAnB;;AAEA,QAAIkB,uBAAJ,EAA6B;AAC3BzB,MAAAA,eAAe,CAAC2B,OAAhB3B,CAAwBW,EAAxBX,EAA4B0B,IAA5B1B,EAAkCU,MAAlCV;AACAY,MAAAA,aAAa,CAACL,OAAdK,GAAwB,IAAxBA;AACD,KAHD,MAGO,IAAIA,aAAa,CAACL,OAAlB,EAA2B;AAChCP,MAAAA,eAAe,CAACe,UAAhBf,CAA2BW,EAA3BX;AACAY,MAAAA,aAAa,CAACL,OAAdK,GAAwB,KAAxBA;AACD;AACF,GApBDb,EAoBG,CAACW,MAAD,EAASD,OAAT,EAAkBE,EAAlB,CApBHZ;AAqBAA,EAAAA,KAAK,CAAC6B,aAAN7B,CAAoB;AAClB8B,IAAAA,WAAW,EAAEpB,OAAO,CAACF,OAARE,KAAoBT,eAAe,CAAC8B,gBAAhB9B;AADf,GAApBD;AAGAA,EAAAA,KAAK,CAAC6B,aAAN7B,CAAoBW,MAApBX;AACD;AAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false); // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]); // Register and unregister with the Responder System as necessary\n\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}"]},"metadata":{},"sourceType":"module"}