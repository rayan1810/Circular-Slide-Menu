{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useListBox = useListBox;\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _utils2 = require(\"./utils\");\n\nvar _label = require(\"@react-aria/label\");\n\nvar _selection = require(\"@react-aria/selection\");\n\nvar _utils3 = require(\"@react-native-aria/utils\");\n\nfunction useListBox(props, state, ref) {\n  var domProps = (0, _utils.filterDOMProps)(props, {\n    labelable: true\n  });\n\n  var _ref = (0, _selection.useSelectableList)(_objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _ref.listProps;\n\n  var id = (0, _utils.useId)(props.id);\n\n  _utils2.listIds.set(state, id);\n\n  var _ref2 = (0, _label.useLabel)(_objectSpread(_objectSpread({}, props), {}, {\n    id: id,\n    labelElementType: 'span'\n  })),\n      _labelProps = _ref2.labelProps,\n      fieldProps = _ref2.fieldProps;\n\n  var labelProps = (0, _utils3.mapDomPropsToRN)(_labelProps);\n\n  var _listBoxProps = (0, _utils.mergeProps)(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n    'aria-multiselectable': 'true'\n  } : {}, _objectSpread({\n    role: 'listbox'\n  }, (0, _utils.mergeProps)(fieldProps, listProps)));\n\n  var listBoxProps = (0, _utils3.useMapDomPropsToRN)(_listBoxProps, ref);\n  return {\n    labelProps: labelProps,\n    listBoxProps: listBoxProps\n  };\n}","map":{"version":3,"sources":["useListBox.web.ts"],"names":["domProps","labelable","listProps","ref","selectionManager","state","collection","disabledKeys","id","props","listIds","labelProps","fieldProps","labelElementType","_listBoxProps","role","listBoxProps"],"mappings":";;;;;;;;;;;;;AAaA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AA+BO,SAAA,UAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAIQ;AACb,MAAIA,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,KAAA,EAAsB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAtB,CAAf;;AACA,aAAoB,CAAA,GAAA,UAAA,CAAA,iBAAA,kCAAkB,KAAlB;AAElBE,IAAAA,GAFoC,EAEpCA,GAFkB;AAGlBC,IAAAA,gBAAgB,EAAEC,KAAK,CAHa,gBAAlB;AAIlBC,IAAAA,UAAU,EAAED,KAAK,CAJmB,UAAlB;AAKlBE,IAAAA,YAAY,EAAEF,KAAK,CAACE;AALF,KAApB;AAAA,MAAML,SAAN,QAAMA,SAAN;;AAQA,MAAIM,EAAE,GAAG,CAAA,GAAA,MAAA,CAAA,KAAA,EAAMC,KAAK,CAApB,EAAS,CAAT;;AACAC,EAAAA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAAA,EAAAA;;AAEA,cAA8C,CAAA,GAAA,MAAA,CAAA,QAAA,kCAAS,KAAT;AAE5CF,IAAAA,EAFqD,EAErDA,EAF4C;AAK5CK,IAAAA,gBAAgB,EAAE;AAL0B,KAA9C;AAAA,MAAI,WAAJ,SAAMF,UAAN;AAAA,MAA+BC,UAA/B,SAA+BA,UAA/B;;AAQA,MAAMD,UAAU,GAAG,CAAA,GAAA,OAAA,CAAA,eAAA,EAAnB,WAAmB,CAAnB;;AAEA,MAAMG,aAAa,GAAG,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,QAAA,EAEpB,KAAK,CAAL,gBAAA,CAAA,aAAA,KAAA,UAAA,GACI;AACE,4BAAwB;AAD1B,GADJ,GAFoB,EAAA;AAQlBC,IAAAA,IAAI,EADN;AAPoB,KASf,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,UAAA,EAAA,SAAA,CATe,EAAtB;;AAaA,MAAMC,YAAY,GAAG,CAAA,GAAA,OAAA,CAAA,kBAAA,EAAA,aAAA,EAArB,GAAqB,CAArB;AAEA,SAAO;AACLL,IAAAA,UADK,EACLA,UADK;AAELK,IAAAA,YAAAA,EAAAA;AAFK,GAAP;AAID","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaListBoxProps } from '@react-types/listbox';\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { HTMLAttributes, ReactNode, RefObject } from 'react';\nimport { KeyboardDelegate } from '@react-types/shared';\nimport { listIds } from './utils';\nimport { ListState } from '@react-stately/list';\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>;\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>;\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean;\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(\n  props: AriaListBoxOptions<T>,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ListBoxAria {\n  let domProps = filterDOMProps(props, { labelable: true });\n  let { listProps } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let { labelProps: _labelProps, fieldProps } = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span',\n  });\n\n  const labelProps = mapDomPropsToRN(_labelProps);\n\n  const _listBoxProps = mergeProps(\n    domProps,\n    state.selectionManager.selectionMode === 'multiple'\n      ? {\n          'aria-multiselectable': 'true',\n        }\n      : {},\n    {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps),\n    }\n  );\n\n  const listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n\n  return {\n    labelProps,\n    listBoxProps,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}