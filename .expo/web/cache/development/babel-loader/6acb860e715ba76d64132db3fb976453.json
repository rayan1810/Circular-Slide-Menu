{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\n\nvar Dimensions1 = function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    if (!canUseDOM) {\n      return;\n    }\n\n    var win = window;\n    var docEl = win.document.documentElement;\n    dimensions.window = {\n      fontScale: 1,\n      height: docEl.clientHeight,\n      scale: win.devicePixelRatio || 1,\n      width: docEl.clientWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    var _this = this;\n\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, handler);\n      }\n    };\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions1 as default };\n\nif (canUseDOM) {\n  Dimensions1._update();\n\n  window.addEventListener('resize', Dimensions1._update, false);\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\exports\\Dimensions\\index.js"],"names":["canUseDOM","invariant","dimensions","window","fontScale","height","scale","width","screen","listeners","Dimensions","get","dimension","set","initialDimensions","_update","win","docEl","document","documentElement","clientHeight","devicePixelRatio","clientWidth","Array","isArray","forEach","handler","addEventListener","type","_this","push","remove","removeEventListener","filter","_handler","default"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\n\nvar Dimensions = /*#__PURE__*/function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    if (!canUseDOM) {\n      return;\n    }\n\n    var win = window;\n    var docEl = win.document.documentElement;\n    dimensions.window = {\n      fontScale: 1,\n      height: docEl.clientHeight,\n      scale: win.devicePixelRatio || 1,\n      width: docEl.clientWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    var _this = this;\n\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, handler);\n      }\n    };\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nif (canUseDOM) {\n  Dimensions._update();\n\n  window.addEventListener('resize', Dimensions._update, false);\n}"]},"metadata":{},"sourceType":"module"}