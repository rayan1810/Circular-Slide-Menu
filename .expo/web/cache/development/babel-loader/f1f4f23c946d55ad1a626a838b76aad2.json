{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBackHandler = useBackHandler;\nexports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar keyboardDismissHandlers = [];\nvar keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexports.keyboardDismissHandlerManager = keyboardDismissHandlerManager;\n\nvar useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n      callback = _ref.callback;\n\n  _react.default.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\n\nexports.useKeyboardDismissable = useKeyboardDismissable;\n\nfunction useBackHandler(_ref2) {\n  var enabled = _ref2.enabled,\n      callback = _ref2.callback;\n  (0, _react.useEffect)(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return function () {\n      return _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\native-base\\lib\\commonjs\\hooks\\useKeyboardDismissable.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","useBackHandler","useKeyboardDismissable","keyboardDismissHandlerManager","_react","keyboardDismissHandlers","push","handler","filter","h","length","pop","_ref","enabled","callback","default","useEffect","cleanupFn","_ref2","backHandler","_reactNative","BackHandler","addEventListener","removeEventListener"],"mappings":"AAAA,IAAIA,uBAAuB,GAACC,OAAO,CAAC,+CAAD,CAAnC;;AAAqFC,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA8B,YAA9BA,EAA2C;AAACG,EAAAA,KAAK,EAAC;AAAP,CAA3CH;AAAyDE,OAAO,CAACE,cAARF,GAAuBE,cAAvBF;AAAsCA,OAAO,CAACG,sBAARH,GAA+BA,OAAO,CAACI,6BAARJ,GAAsC,KAAK,CAA1EA;;AAA4E,IAAIK,MAAM,GAACT,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAlC;;;;AAA8F,IAAIS,uBAAuB,GAAC,EAA5B;AAA+B,IAAIF,6BAA6B,GAAC;AAACG,EAAAA,IAAI,EAAC,SAASA,IAAT,CAAcC,OAAd,EAAsB;AAACF,IAAAA,uBAAuB,CAACC,IAAxBD,CAA6BE,OAA7BF;AAAsC,WAAO,YAAU;AAACA,MAAAA,uBAAuB,GAACA,uBAAuB,CAACG,MAAxBH,CAA+B,UAASI,CAAT,EAAW;AAAC,eAAOA,CAAC,KAAGF,OAAX;AAAoB,OAA/DF,CAAxBA;AAA0F,KAA5G;AAA8G,GAAjL;AAAkLK,EAAAA,MAAM,EAAC,SAASA,MAAT,GAAiB;AAAC,WAAOL,uBAAuB,CAACK,MAA/B;AAAuC,GAAlP;AAAmPC,EAAAA,GAAG,EAAC,SAASA,GAAT,GAAc;AAAC,WAAON,uBAAuB,CAACM,GAAxBN,EAAP;AAAsC;AAA5S,CAAlC;AAAgVN,OAAO,CAACI,6BAARJ,GAAsCI,6BAAtCJ;;AAAoE,IAAIG,sBAAsB,GAAC,SAASA,sBAAT,CAAgCU,IAAhC,EAAqC;AAAC,MAAIC,OAAO,GAACD,IAAI,CAACC,OAAjB;AAAA,MAAyBC,QAAQ,GAACF,IAAI,CAACE,QAAvC;;AAAgDV,EAAAA,MAAM,CAACW,OAAPX,CAAeY,SAAfZ,CAAyB,YAAU;AAAC,QAAIa,SAAS,GAAC,SAASA,SAAT,GAAoB,CAAE,CAApC;;AAAqC,QAAGJ,OAAH,EAAW;AAACI,MAAAA,SAAS,GAACd,6BAA6B,CAACG,IAA9BH,CAAmCW,QAAnCX,CAAVc;AAAwD,KAApE,MAAwE;AAACA,MAAAA,SAAS;AAAI;;AAAA,WAAO,YAAU;AAACA,MAAAA,SAAS;AAAI,KAA/B;AAAiC,GAAhMb,EAAiM,CAACS,OAAD,EAASC,QAAT,CAAjMV;;AAAqNH,EAAAA,cAAc,CAAC;AAACY,IAAAA,OAAO,EAACA,OAAT;AAAiBC,IAAAA,QAAQ,EAACA;AAA1B,GAAD,CAAdb;AAAqD,CAA3X;;AAA4XF,OAAO,CAACG,sBAARH,GAA+BG,sBAA/BH;;SAA+DE,c,CAAeiB,K,EAAM;AAAC,MAAIL,OAAO,GAACK,KAAK,CAACL,OAAlB;AAAA,MAA0BC,QAAQ,GAACI,KAAK,CAACJ,QAAzC;GAAmD,GAAEV,MAAM,CAACY,S,EAAW,YAAU;AAAC,QAAIG,WAAW,GAAC,SAASA,WAAT,GAAsB;AAACL,MAAAA,QAAQ;AAAG,aAAO,IAAP;AAAa,KAA/D;;AAAgE,QAAGD,OAAH,EAAW;AAACO,MAAAA,YAAY,CAACC,WAAbD,CAAyBE,gBAAzBF,CAA0C,mBAA1CA,EAA8DD,WAA9DC;AAA4E,KAAxF,MAA4F;AAACA,MAAAA,YAAY,CAACC,WAAbD,CAAyBG,mBAAzBH,CAA6C,mBAA7CA,EAAiED,WAAjEC;AAA+E;;AAAA,WAAO,YAAU;AAAC,aAAOA,YAAY,CAACC,WAAbD,CAAyBG,mBAAzBH,CAA6C,mBAA7CA,EAAiED,WAAjEC,CAAP;AAAsF,KAAxG;AAA0G,G,EAAC,CAACP,OAAD,EAASC,QAAT,C;AAC3oD","sourcesContent":["var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useBackHandler=useBackHandler;exports.useKeyboardDismissable=exports.keyboardDismissHandlerManager=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var keyboardDismissHandlers=[];var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};exports.keyboardDismissHandlerManager=keyboardDismissHandlerManager;var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;_react.default.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};exports.useKeyboardDismissable=useKeyboardDismissable;function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;(0,_react.useEffect)(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){_reactNative.BackHandler.addEventListener('hardwareBackPress',backHandler);}else{_reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return _reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}\n//# sourceMappingURL=useKeyboardDismissable.js.map"]},"metadata":{},"sourceType":"script"}