{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\n'use strict';\n\nvar EventSubscriptionVendor1 = function () {\n  var EventSubscriptionVendor = function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  };\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor1;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\vendor\\react-native\\emitter\\_EventSubscriptionVendor.js"],"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","_proto","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"mappings":"AAWA,OAAOA,SAAP,MAAsB,oBAAtB;AAFA;;AAQA,IAAIC,wBAAuB,GAAgB,YAAY;MAC5CA,uBAAuB,GAAhC,SAASA,uBAAT,GAAmC;AACjC,SAAKC,qBAAL,GAA6B,EAA7B;AACD,G;;AASD,MAAIC,MAAM,GAAGF,uBAAuB,CAACG,SAArC;;AAEAD,EAAAA,MAAM,CAACE,eAAPF,GAAyB,SAASE,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AACzEP,IAAAA,SAAS,CAACO,YAAY,CAACC,UAAbD,KAA4B,IAA7B,EAAmC,wDAAnC,CAATP;;AAEA,QAAE,CAAG,KAAKE,qBAAL,CAA2BI,SAA3B,CAAL,EAA4C;AAC1C,WAAKJ,qBAAL,CAA2BI,SAA3B,IAAwC,EAAxC;AACD;;AAED,QAAIG,GAAG,GAAG,KAAKP,qBAAL,CAA2BI,SAA3B,EAAsCI,MAAhD;;AAEA,SAAKR,qBAAL,CAA2BI,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AAEAA,IAAAA,YAAY,CAACD,SAAbC,GAAyBD,SAAzBC;AACAA,IAAAA,YAAY,CAACE,GAAbF,GAAmBE,GAAnBF;AACA,WAAOA,YAAP;AACD,GAdDJ;;AAuBAA,EAAAA,MAAM,CAACS,sBAAPT,GAAgC,SAASS,sBAAT,CAAgCN,SAAhC,EAA2C;AACzE,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAKJ,qBAAL,GAA6B,EAA7B;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,qBAAL,CAA2BI,SAA3B,CAAP;AACD;AACF,GANDH;;AAeAA,EAAAA,MAAM,CAACU,kBAAPV,GAA4B,SAASU,kBAAT,CAA4BN,YAA5B,EAA0C;AACpE,QAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;AACA,QAAIG,GAAG,GAAGF,YAAY,CAACE,GAAvB;AACA,QAAIK,oBAAoB,GAAG,KAAKZ,qBAAL,CAA2BI,SAA3B,CAA3B;;AAEA,QAAIQ,oBAAJ,EAA0B;AACxB,aAAOA,oBAAoB,CAACL,GAAD,CAA3B;AACD;AACF,GARDN;;AAuBAA,EAAAA,MAAM,CAACY,uBAAPZ,GAAiC,SAASY,uBAAT,CAAiCT,SAAjC,EAA4C;AAC3E,WAAO,KAAKJ,qBAAL,CAA2BI,SAA3B,CAAP;AACD,GAFDH;;AAIA,SAAOF,uBAAP;AACD,CAhF0C,EAA3C;;AAkFA,eAAeA,wBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}