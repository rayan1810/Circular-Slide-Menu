{"ast":null,"code":"import Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n'use strict';\n\nvar NativeEventEmitter1 = function () {\n  var NativeEventEmitter = function NativeEventEmitter(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  };\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter1 as default };\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\vendor\\react-native\\NativeEventEmitter\\index.js"],"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","OS","_nativeModule","_proto","prototype","addListener","eventType","listener","context","_this$_nativeModule","_this","subscription","remove","_this$_nativeModule2","removeListeners","removeListener","_this$_nativeModule3","emit","_len","arguments","length","args","Array","_key","apply","concat","removeAllListeners","_this$_nativeModule4","listenerCount","default"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nvar NativeEventEmitter = /*#__PURE__*/function () {\n  function NativeEventEmitter(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter as default };"]},"metadata":{},"sourceType":"module"}