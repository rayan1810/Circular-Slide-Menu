{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  resolvedStyle.transform = transform;\n};\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\exports\\StyleSheet\\createReactDOMStyle.js"],"names":["canUseDOM","MONOSPACE_FONT_STACK","SYSTEM_FONT_STACK","STYLE_SHORT_FORM_EXPANSIONS","normalizeValueWithProperty","emptyObject","supportsCSS3TextDecoration","window","CSS","supports","mapTransform","transform","type","Object","keys","value","join","normalizedValue","resolveTransform","resolvedStyle","style","Array","isArray","map","createReactDOMStyle","sort","forEach","prop","toString","backgroundClip","WebkitBackgroundClip","flexGrow","flexShrink","flexBasis","flex","replace","indexOf","stack","split","length","fontVariant","verticalAlign","textDecoration","textDecorationLine","direction","longFormProperties","longForm","i"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n// { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  resolvedStyle.transform = transform;\n};\n/**\n * Reducer\n */\n\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop); // Ignore everything else with a null value\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      // Ignore some React Native styles\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n      // The 'flex' property value in React Native must be a positive integer,\n      // 0, or -1.\n\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;"]},"metadata":{},"sourceType":"module"}