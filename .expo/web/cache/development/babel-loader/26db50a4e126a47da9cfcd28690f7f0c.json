{"ast":null,"code":"var _require = require(\"react\"),\n    useEffect = _require.useEffect;\n\nvar _require2 = require(\"@react-stately/list\"),\n    useSingleSelectListState = _require2.useSingleSelectListState;\n\nvar _babelRuntimeHelpersExtends = $parcel$interopDefault(require(\"@babel/runtime/helpers/extends\"));\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction useTabListState(props) {\n  var state = useSingleSelectListState(_babelRuntimeHelpersExtends({}, props, {\n    suppressTextValueWarning: true\n  }));\n  useEffect(function () {\n    var selectedKey = state.selectedKey;\n\n    if (state.selectionManager.isEmpty || !state.collection.getItem(selectedKey)) {\n      selectedKey = state.collection.getFirstKey();\n      state.selectionManager.replaceSelection(selectedKey);\n    }\n\n    if (state.selectionManager.focusedKey == null) {\n      state.selectionManager.setFocusedKey(selectedKey);\n    }\n  }, [state.selectionManager, state.selectedKey, state.collection]);\n  return state;\n}\n\nexports.useTabListState = useTabListState;","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","packages/@react-stately/tabs/src/useTabListState.ts"],"names":["a","state","useSingleSelectListState","suppressTextValueWarning","useEffect","selectedKey"],"mappings":";;;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD;;ACqBM,SAAA,eAAA,CAAA,KAAA,EAAoF;AACzF,MAAIC,KAAK,GAAGC,wBAAwB,CAAA,2BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAElCC,IAAAA,wBAAwB,EAAE;AAFQ,GAAA,CAAA,CAApC;AAKAC,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAIC,WAAW,GAAGJ,KAAK,CAAvB,WAAA;;AACA,QAAIA,KAAK,CAALA,gBAAAA,CAAAA,OAAAA,IAAkC,CAACA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAvC,WAAuCA,CAAvC,EAA8E;AAC5EI,MAAAA,WAAW,GAAGJ,KAAK,CAALA,UAAAA,CAAdI,WAAcJ,EAAdI;AACAJ,MAAAA,KAAK,CAALA,gBAAAA,CAAAA,gBAAAA,CAAAA,WAAAA;AACD;;AAED,QAAIA,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,IAAJ,IAAA,EAA+C;AAC7CA,MAAAA,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,CAAAA,WAAAA;AACD;AAVM,GAAA,EAWN,CAACA,KAAK,CAAN,gBAAA,EAAyBA,KAAK,CAA9B,WAAA,EAA4CA,KAAK,CAXpDG,UAWG,CAXM,CAATA;AAaA,SAAA,KAAA;AACD","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useEffect} from 'react';\n\n\nexport interface TabListState<T> extends SingleSelectListState<T> {}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListProps<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true\n  });\n\n  useEffect(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = state.selectedKey;\n    if (state.selectionManager.isEmpty || !state.collection.getItem(selectedKey)) {\n      selectedKey = state.collection.getFirstKey();\n      state.selectionManager.replaceSelection(selectedKey);\n    }\n\n    if (state.selectionManager.focusedKey == null) {\n      state.selectionManager.setFocusedKey(selectedKey);\n    }\n  }, [state.selectionManager, state.selectedKey, state.collection]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"script"}