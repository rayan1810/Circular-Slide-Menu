{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require(\"react\"),\n    useState = _require.useState;\n\nvar _require2 = require(\"@react-stately/overlays\"),\n    useOverlayTriggerState = _require2.useOverlayTriggerState;\n\nvar _babelRuntimeHelpersExtends = $parcel$interopDefault(require(\"@babel/runtime/helpers/extends\"));\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction useMenuTriggerState(props) {\n  var overlayTriggerState = useOverlayTriggerState(props);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusStrategy = _useState2[0],\n      setFocusStrategy = _useState2[1];\n\n  return _babelRuntimeHelpersExtends({\n    focusStrategy: focusStrategy\n  }, overlayTriggerState, {\n    open: function open(focusStrategy) {\n      if (focusStrategy === void 0) {\n        focusStrategy = null;\n      }\n\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle: function toggle(focusStrategy) {\n      if (focusStrategy === void 0) {\n        focusStrategy = null;\n      }\n\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    }\n  });\n}\n\nexports.useMenuTriggerState = useMenuTriggerState;","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","packages/@react-stately/menu/src/useMenuTriggerState.ts"],"names":["a","overlayTriggerState","useOverlayTriggerState","useState","focusStrategy","open","setFocusStrategy","toggle"],"mappings":";;;;;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD;;AC8BM,SAAA,mBAAA,CAAA,KAAA,EAAyE;AAC9E,MAAIC,mBAAmB,GAAGC,sBAAsB,CAAhD,KAAgD,CAAhD;;AACA,kBAAwCC,QAAQ,CAAhD,IAAgD,CAAhD;AAAA;AAAA,MAAI,aAAJ;AAAA,MAAI,gBAAJ;;AAEA,SAAA,2BAAA,CAAA;AACEC,IAAAA,aAAAA,EAAAA;AADF,GAAA,EAAA,mBAAA,EAAA;AAGEC,IAAAA,IAHF,gBAGM,aAHN,EAG4C;AAAA,UAArCD,aAAqC,KAAA,KAAA,CAAA,EAAA;AAArCA,QAAAA,aAAqC,GAAN,IAA/BA;AAAqC;;AACxCE,MAAAA,gBAAgB,CAAhBA,aAAgB,CAAhBA;AACAL,MAAAA,mBAAmB,CAAnBA,IAAAA;AALJ,KAAA;AAOEM,IAAAA,MAPF,kBAOQ,aAPR,EAO8C;AAAA,UAArCH,aAAqC,KAAA,KAAA,CAAA,EAAA;AAArCA,QAAAA,aAAqC,GAAN,IAA/BA;AAAqC;;AAC1CE,MAAAA,gBAAgB,CAAhBA,aAAgB,CAAhBA;AACAL,MAAAA,mBAAmB,CAAnBA,MAAAA;AACD;AAVH,GAAA,CAAA;AAYD","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): MenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}