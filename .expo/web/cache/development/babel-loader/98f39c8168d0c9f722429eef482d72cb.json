{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\exports\\AccessibilityInfo\\index.js"],"names":["canUseDOM","isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","window","matchMedia","isReduceMotionEnabled","matches","addChangeListener","fn","addEventListener","addListener","removeChangeListener","removeEventListener","removeListener","handlers","AccessibilityInfo","fetch","eventName","handler","listener","event","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"mappings":"AAQA,SAASA,SAAT,QAA0B,+BAA1B;;SAESC,qB,GAAwB;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CD,IAAAA,OAAO,CAAC,IAAD,CAAPA;AACD,GAFM,CAAP;AAGD;;AAED,IAAIE,yBAAyB,GAAGL,SAAS,IAAI,OAAOM,MAAM,CAACC,UAAd,KAA6B,UAA1CP,GAAuDM,MAAM,CAACC,UAAPD,CAAkB,kCAAlBA,CAAvDN,GAA+G,IAA/I;;SAESQ,qB,GAAwB;AAC/B,SAAO,IAAIN,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CD,IAAAA,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB,CAACI,OAA7B,GAAuC,IAAjE,CAAPN;AACD,GAFM,CAAP;AAGD;;SAEQO,iB,CAAkBC,E,EAAI;AAC7B,MAAIN,yBAAyB,IAAI,IAAjC,EAAuC;AACrCA,IAAAA,yBAAyB,CAACO,gBAA1BP,IAA8C,IAA9CA,GAAqDA,yBAAyB,CAACO,gBAA1BP,CAA2C,QAA3CA,EAAqDM,EAArDN,CAArDA,GAAgHA,yBAAyB,CAACQ,WAA1BR,CAAsCM,EAAtCN,CAAhHA;AACD;AACF;;SAEQS,oB,CAAqBH,E,EAAI;AAChC,MAAIN,yBAAyB,IAAI,IAAjC,EAAuC;AACrCA,IAAAA,yBAAyB,CAACU,mBAA1BV,IAAiD,IAAjDA,GAAwDA,yBAAyB,CAACU,mBAA1BV,CAA8C,QAA9CA,EAAwDM,EAAxDN,CAAxDA,GAAsHA,yBAAyB,CAACW,cAA1BX,CAAyCM,EAAzCN,CAAtHA;AACD;AACF;;AAED,IAAIY,QAAQ,GAAG,EAAf;AACA,IAAIC,iBAAiB,GAAG;AAOtBjB,EAAAA,qBAAqB,EAAEA,qBAPD;AAetBO,EAAAA,qBAAqB,EAAEA,qBAfD;AAoBtBW,EAAAA,KAAK,EAAElB,qBApBe;AAyBtBW,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BQ,SAA1B,EAAqCC,OAArC,EAA8C;AAC9D,QAAID,SAAS,KAAK,qBAAlB,EAAyC;AACvC,UAAE,CAAGf,yBAAL,EAAgC;AAC9B;AACD;;AAED,UAAIiB,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtCF,QAAAA,OAAO,CAACE,KAAK,CAACd,OAAP,CAAPY;AACD,OAFD;;AAIAX,MAAAA,iBAAiB,CAACY,QAAD,CAAjBZ;AACAO,MAAAA,QAAQ,CAACI,OAAD,CAARJ,GAAoBK,QAApBL;AACD;;AAED,WAAO;AACLO,MAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,eAAON,iBAAiB,CAACH,mBAAlBG,CAAsCE,SAAtCF,EAAiDG,OAAjDH,CAAP;AACD;AAHI,KAAP;AAKD,GA5CqB;AAiDtBO,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CAjD5C;AAsDtBC,EAAAA,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CAtDtD;AA2DtBb,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BK,SAA7B,EAAwCC,OAAxC,EAAiD;AACpE,QAAID,SAAS,KAAK,qBAAlB,EAAyC;AACvC,UAAIE,QAAQ,GAAGL,QAAQ,CAACI,OAAD,CAAvB;;AAEA,UAAE,CAAGC,QAAH,IAAW,CAAKjB,yBAAlB,EAA6C;AAC3C;AACD;;AAEDS,MAAAA,oBAAoB,CAACQ,QAAD,CAApBR;AACD;;AAED;AACD;AAvEqB,CAAxB;AAyEA,eAAeI,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled: isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled: isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}