{"ast":null,"code":"var dataUriPattern = /^data:/;\n\nvar ImageUriCache1 = function () {\n  var ImageUriCache = function ImageUriCache() {};\n\n  ImageUriCache.has = function has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  };\n\n  ImageUriCache.add = function add(uri) {\n    var entries = ImageUriCache._entries;\n    var lastUsedTimestamp = Date.now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp: lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  };\n\n  ImageUriCache.remove = function remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    }\n\n    ImageUriCache._cleanUpIfNeeded();\n  };\n\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n    var imageUris = Object.keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(function (uri) {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  };\n\n  return ImageUriCache;\n}();\n\nexport { ImageUriCache1 as ImageUriCache };\nImageUriCache1._maximumEntries = 256;\nImageUriCache1._entries = {};\nvar id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = null;\n      image.onload = null;\n      image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var callback = function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    };\n\n    var errorCallback = function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    };\n\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n  },\n  has: function has(uri) {\n    return ImageUriCache1.has(uri);\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      var onDecode = function onDecode() {\n        return onLoad({\n          nativeEvent: e\n        });\n      };\n\n      if (typeof image.decode === 'function') {\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, function () {\n        ImageUriCache1.add(uri);\n        ImageUriCache1.remove(uri);\n        resolve();\n      }, reject);\n    });\n  },\n  queryCache: function queryCache(uris) {\n    var result = {};\n    uris.forEach(function (u) {\n      if (ImageUriCache1.has(u)) {\n        result[u] = 'disk/memory';\n      }\n    });\n    return Promise.resolve(result);\n  }\n};\nexport default ImageLoader;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\modules\\ImageLoader\\index.js"],"names":["dataUriPattern","ImageUriCache","has","uri","entries","_entries","isDataUri","test","Boolean","add","lastUsedTimestamp","Date","now","refCount","remove","_cleanUpIfNeeded","imageUris","Object","keys","length","_maximumEntries","leastRecentlyUsedKey","leastRecentlyUsedEntry","forEach","entry","id","requests","ImageLoader","abort","requestId","image","onerror","onload","getSize","success","failure","complete","interval","setInterval","callback","load","errorCallback","naturalHeight","naturalWidth","clearInterval","onLoad","onError","window","Image","e","onDecode","nativeEvent","decode","then","setTimeout","src","prefetch","Promise","resolve","reject","queryCache","uris","result","u"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar dataUriPattern = /^data:/;\nexport var ImageUriCache = /*#__PURE__*/function () {\n  function ImageUriCache() {}\n\n  ImageUriCache.has = function has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  };\n\n  ImageUriCache.add = function add(uri) {\n    var entries = ImageUriCache._entries;\n    var lastUsedTimestamp = Date.now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp: lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  };\n\n  ImageUriCache.remove = function remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    } // Free up entries when the cache is \"full\"\n\n\n    ImageUriCache._cleanUpIfNeeded();\n  };\n\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n    var imageUris = Object.keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(function (uri) {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  };\n\n  return ImageUriCache;\n}();\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nvar id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = null;\n      image.onload = null;\n      image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  has: function has(uri) {\n    return ImageUriCache.has(uri);\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      // avoid blocking the main thread\n      var onDecode = function onDecode() {\n        return onLoad({\n          nativeEvent: e\n        });\n      };\n\n      if (typeof image.decode === 'function') {\n        // Safari currently throws exceptions when decoding svgs.\n        // We want to catch that error and allow the load handler\n        // to be forwarded to the onLoad handler in this case\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, function () {\n        // Add the uri to the cache so it can be immediately displayed when used\n        // but also immediately remove it to correctly reflect that it has no active references\n        ImageUriCache.add(uri);\n        ImageUriCache.remove(uri);\n        resolve();\n      }, reject);\n    });\n  },\n  queryCache: function queryCache(uris) {\n    var result = {};\n    uris.forEach(function (u) {\n      if (ImageUriCache.has(u)) {\n        result[u] = 'disk/memory';\n      }\n    });\n    return Promise.resolve(result);\n  }\n};\nexport default ImageLoader;"]},"metadata":{},"sourceType":"module"}