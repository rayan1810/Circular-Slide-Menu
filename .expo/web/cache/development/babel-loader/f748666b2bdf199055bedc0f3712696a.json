{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOption = useOption;\n\nvar _collections = require(\"@react-stately/collections\");\n\nvar _utils = require(\"./utils\");\n\nvar _interactions = require(\"@react-aria/interactions\");\n\nvar _interactions2 = require(\"@react-native-aria/interactions\");\n\nvar _utils2 = require(\"@react-aria/utils\");\n\nvar _selection = require(\"@react-aria/selection\");\n\nvar _utils3 = require(\"@react-native-aria/utils\");\n\nfunction useOption(props, state, ref) {\n  var isSelected = props.isSelected,\n      isDisabled = props.isDisabled,\n      key = props.key,\n      shouldSelectOnPressUp = props.shouldSelectOnPressUp,\n      shouldFocusOnHover = props.shouldFocusOnHover,\n      isVirtualized = props.isVirtualized,\n      shouldUseVirtualFocus = props.shouldUseVirtualFocus;\n  var labelId = (0, _utils2.useSlotId)();\n  var descriptionId = (0, _utils2.useSlotId)();\n  var _optionProps = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  if (!((0, _utils2.isMac)() && (0, _utils2.isWebKit)())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = (0, _collections.getItemCount)(state.collection);\n  }\n\n  var _ref = (0, _selection.useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus\n  }),\n      itemProps = _ref.itemProps;\n\n  var _ref2 = (0, _interactions2.usePress)(_objectSpread(_objectSpread({}, itemProps), {}, {\n    isDisabled: isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus\n  })),\n      pressProps = _ref2.pressProps;\n\n  var _ref3 = (0, _interactions2.useHover)({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!(0, _interactions.isFocusVisible)()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }, ref),\n      hoverProps = _ref3.hoverProps;\n\n  var onMouseDown = function onMouseDown(e) {\n    return e.stopPropagation();\n  };\n\n  _optionProps = _objectSpread(_objectSpread(_objectSpread({}, _optionProps), (0, _utils2.mergeProps)(pressProps, hoverProps)), {}, {\n    id: (0, _utils.getItemId)(state, key),\n    onMouseDown: onMouseDown\n  });\n  var optionProps = (0, _utils3.useMapDomPropsToRN)(_optionProps, ref);\n  return {\n    optionProps: optionProps,\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    }\n  };\n}","map":{"version":3,"sources":["useOption.web.ts"],"names":["shouldUseVirtualFocus","labelId","descriptionId","_optionProps","isSelected","props","state","itemProps","selectionManager","key","ref","shouldSelectOnPressUp","isVirtualized","pressProps","isDisabled","preventFocusOnPress","hoverProps","onHoverStart","onMouseDown","e","id","optionProps","labelProps","nativeID","descriptionProps"],"mappings":"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","sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { ListState } from '@react-stately/list';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let _optionProps: any = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected,\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  });\n\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus,\n  });\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          //@ts-ignore\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown = (e: any) => e.stopPropagation();\n\n  _optionProps = {\n    ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown,\n  };\n\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n\n  return {\n    optionProps,\n    labelProps: {\n      nativeID: labelId,\n    },\n    descriptionProps: {\n      nativeID: descriptionId,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}