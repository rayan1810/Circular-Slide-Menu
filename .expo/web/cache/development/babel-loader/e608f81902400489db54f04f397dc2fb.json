{"ast":null,"code":"var slice = Array.prototype.slice;\nexport default function createOrderedCSSStyleSheet(sheet1) {\n  var sheetInsert = function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex];\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      }\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  };\n\n  var groups = {};\n  var selectors = {};\n\n  if (sheet1 != null) {\n    var group1;\n    slice.call(sheet1.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText;\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group1 = decodeGroupRule(cssRule);\n        groups[group1] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group1].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  var OrderedCSSStyleSheet = {\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue);\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group);\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        };\n\n        if (sheet1 != null) {\n          sheetInsert(sheet1, group, markerRule);\n        }\n      }\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText);\n\n        if (sheet1 != null) {\n          var isInserted = sheetInsert(sheet1, group, cssText);\n\n          if (!isInserted) {\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n;\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(/[\"']/)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar pattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(pattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\exports\\StyleSheet\\createOrderedCSSStyleSheet.js"],"names":["slice","Array","prototype","createOrderedCSSStyleSheet","sheet","groups","selectors","group","call","cssRules","forEach","cssRule","i","cssText","indexOf","decodeGroupRule","start","rules","selectorText","getSelectorText","push","sheetInsert","text","orderedGroups","getOrderedGroups","groupIndex","nextGroupIndex","nextGroup","position","length","isInserted","insertRuleAt","groupNumber","previousStart","OrderedCSSStyleSheet","getTextContent","map","join","insert","groupValue","Number","markerRule","encodeGroupRule","pop","split","obj","Object","keys","sort","a","b","pattern","selector","trim","replace","root","insertRule","e"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar slice = Array.prototype.slice;\n/**\n * Order-based insertion of CSS.\n *\n * Each rule is associated with a numerically defined group.\n * Groups are ordered within the style sheet according to their number, with the\n * lowest first.\n *\n * Groups are implemented using marker rules. The selector of the first rule of\n * each group is used only to encode the group number for hydration. An\n * alternative implementation could rely on CSSMediaRule, allowing groups to be\n * treated as a sub-sheet, but the Edge implementation of CSSMediaRule is\n * broken.\n * https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule\n * https://gist.github.com/necolas/aa0c37846ad6bd3b05b727b959e82674\n */\n\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n  /**\n   * Hydrate approximate record from any existing rules in the sheet.\n   */\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText; // Create record of existing selectors and rules\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex]; // Insert rule before the next group, or at the end of the stylesheet\n\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      // Set the starting index of the new group\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      } // Increment the starting index of all subsequent groups\n\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    /**\n     * The textContent of the style sheet.\n     */\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n\n    /**\n     * Insert a rule into the style sheet\n     */\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue); // Create a new group.\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group); // Create the internal record.\n\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        }; // Update CSSOM.\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      } // selectorText is more reliable than cssText for insertion checks. The\n      // browser excludes vendor-prefixed properties and rewrites certain values\n      // making cssText more likely to be different from what was inserted.\n\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        // Update the internal records.\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText); // Update CSSOM.\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            // Revert internal record change if a rule was rejected (e.g.,\n            // unrecognized pseudo-selector)\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n/**\n * Helper functions\n */\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(/[\"']/)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar pattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(pattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    // $FlowFixMe: Flow is missing CSSOM types needed to type 'root'.\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    // JSDOM doesn't support `CSSSMediaRule#insertRule`.\n    // Also ignore errors that occur from attempting to insert vendor-prefixed selectors.\n    return false;\n  }\n}"]},"metadata":{},"sourceType":"module"}