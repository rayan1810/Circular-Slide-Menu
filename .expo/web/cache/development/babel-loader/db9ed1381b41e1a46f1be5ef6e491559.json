{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\n\nvar _s = $RefreshSig$();\n\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (\"development\" !== 'production' && \"development\" !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  _s();\n\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}\n;\n\n_s(useElementLayout, \"5gnE2Ajhys4gWWzxGI/Z+4vwtPY=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["C:\\projects\\portfolio\\experiment-1\\node_modules\\react-native-web\\dist\\modules\\useElementLayout\\index.js"],"names":["canUseDOM","useLayoutEffect","UIManager","DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","node","target","onLayout","measure","x","y","width","height","left","top","event","nativeEvent","layout","timeStamp","Date","now","Object","defineProperty","enumerable","get","console","warn","useElementLayout","ref","observer","current","observe","unobserve"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]); // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}"]},"metadata":{},"sourceType":"module"}